#include <stdio.h>
#include <string.h>

#define SIZE 2

void encryptHill(char *text, int key[SIZE][SIZE]) {
    int len = strlen(text);
    for (int i = 0; i < len; i += 2) {
        int x1 = text[i] - 'A';
        int x2 = text[i + 1] - 'A';

        // Ignore non-alpha characters
        if (x1 < 0 || x1 > 25 || x2 < 0 || x2 > 25) continue;

        int y1 = (key[0][0] * x1 + key[0][1] * x2) % 26;
        int y2 = (key[1][0] * x1 + key[1][1] * x2) % 26;

        text[i] = y1 + 'A';
        text[i + 1] = y2 + 'A';
    }
}

void decryptHill(char *text, int key[SIZE][SIZE]) {
    int inverseKey[SIZE][SIZE];
    int det = (key[0][0] * key[1][1] - key[0][1] * key[1][0] + 26) % 26;
    int invDet = 0;

    // Calculate modular inverse of det
    for (int i = 1; i < 26; i++) {
        if ((det * i) % 26 == 1) {
            invDet = i;
            break;
        }
    }

    // Compute the inverse key matrix
    inverseKey[0][0] = (key[1][1] * invDet) % 26;
    inverseKey[0][1] = (-key[0][1] * invDet + 26) % 26;
    inverseKey[1][0] = (-key[1][0] * invDet + 26) % 26;
    inverseKey[1][1] = (key[0][0] * invDet) % 26;

    int len = strlen(text);
    for (int i = 0; i < len; i += 2) {
        int x1 = text[i] - 'A';
        int x2 = text[i + 1] - 'A';

        // Ignore non-alpha characters
        if (x1 < 0 || x1 > 25 || x2 < 0 || x2 > 25) continue;

        int y1 = (inverseKey[0][0] * x1 + inverseKey[0][1] * x2) % 26;
        int y2 = (inverseKey[1][0] * x1 + inverseKey[1][1] * x2) % 26;

        text[i] = y1 + 'A';
        text[i + 1] = y2 + 'A';
    }
}

int main() {
    char text[] = "MEETMEATTHEUSUALPLACEATTENRATHERTHANEIGHTO_CLOCK";
    int key[SIZE][SIZE] = {{9, 4}, {5, 7}};

    encryptHill(text, key);
    printf("Encrypted text: %s\n", text);

    decryptHill(text, key);
    printf("Decrypted text: %s\n", text);

    return 0;
}
