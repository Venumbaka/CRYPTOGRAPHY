import numpy as np

def mod_inverse(matrix, modulus):
    det = int(np.round(np.linalg.det(matrix)))
    det_inv = pow(det, -1, modulus)
    matrix_modulus_inv = (
        det_inv * np.round(det * np.linalg.inv(matrix)).astype(int) % modulus
    )
    return matrix_modulus_inv

def hill_encrypt(plaintext, key_matrix):
    modulus = 26
    plaintext = plaintext.upper().replace(' ', '')
    n = key_matrix.shape[0]
    if len(plaintext) % n != 0:
        plaintext += 'X' * (n - len(plaintext) % n)
    plaintext_matrix = [
        [ord(char) - ord('A') for char in plaintext[i:i + n]]
        for i in range(0, len(plaintext), n)
    ]
    plaintext_matrix = np.array(plaintext_matrix).T
    encrypted_matrix = np.dot(key_matrix, plaintext_matrix) % modulus
    encrypted_text = ''.join(chr(int(char) + ord('A')) for char in encrypted_matrix.T.flatten())
    return encrypted_text

def hill_decrypt(ciphertext, key_matrix):
    modulus = 26
    n = key_matrix.shape[0]
    ciphertext_matrix = [
        [ord(char) - ord('A') for char in ciphertext[i:i + n]]
        for i in range(0, len(ciphertext), n)
    ]
    ciphertext_matrix = np.array(ciphertext_matrix).T
    key_matrix_inv = mod_inverse(key_matrix, modulus)
    decrypted_matrix = np.dot(key_matrix_inv, ciphertext_matrix) % modulus
    decrypted_text = ''.join(chr(int(char) + ord('A')) for char in decrypted_matrix.T.flatten())
    return decrypted_text

# Example usage
key_matrix = np.array([[6, 24, 1],
                       [13, 16, 10],
                       [20, 17, 15]])
plaintext = "HELLO"

encrypted_text = hill_encrypt(plaintext, key_matrix)
print(f"Encrypted: {encrypted_text}")

decrypted_text = hill_decrypt(encrypted_text, key_matrix)
print(f"Decrypted: {decrypted_text}")
