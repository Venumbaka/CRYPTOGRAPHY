def generate_vigenere_table():
    table = []
    for i in range(26):
        row = [(chr((j + i) % 26 + 65)) for j in range(26)]
        table.append(row)
    return table

def encrypt(plaintext, key):
    table = generate_vigenere_table()
    ciphertext = ''
    key = key.upper()
    key_length = len(key)
    key_index = 0

    for char in plaintext:
        if char.isalpha():
            is_upper = char.isupper()
            char = char.upper()
            row = ord(key[key_index % key_length]) - 65
            col = ord(char) - 65
            encrypted_char = table[row][col]
            ciphertext += encrypted_char if is_upper else encrypted_char.lower()
            key_index += 1
        else:
            ciphertext += char

    return ciphertext

def decrypt(ciphertext, key):
    table = generate_vigenere_table()
    plaintext = ''
    key = key.upper()
    key_length = len(key)
    key_index = 0

    for char in ciphertext:
        if char.isalpha():
            is_upper = char.isupper()
            char = char.upper()
            row = ord(key[key_index % key_length]) - 65
            col = table[row].index(char)
            decrypted_char = chr(col + 65)
            plaintext += decrypted_char if is_upper else decrypted_char.lower()
            key_index += 1
        else:
            plaintext += char

    return plaintext

# Example usage
plaintext = "Hello, World!"
key = "KEY"

encrypted_text = encrypt(plaintext, key)
print(f"Encrypted: {encrypted_text}")

decrypted_text = decrypt(encrypted_text, key)
print(f"Decrypted: {decrypted_text}")
