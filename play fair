def generate_playfair_table(key):
    # Create a 5x5 matrix for the Playfair cipher
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    key = "".join(sorted(set(key.upper()), key=lambda k: key.index(k)))
    key = key.replace("J", "I")  # Playfair typically combines I and J
    table = []

    for char in key:
        if char not in table and char in alphabet:
            table.append(char)

    for char in alphabet:
        if char not in table:
            table.append(char)

    table = [table[i:i + 5] for i in range(0, len(table), 5)]
    return table

def preprocess_text(text, pad_char='X'):
    text = text.upper().replace("J", "I")
    text = ''.join([char for char in text if char.isalpha()])

    # Split text into pairs, adding padding if needed
    pairs = []
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i + 1] if (i + 1 < len(text)) else pad_char
        if a == b:
            pairs.append(a + pad_char)
            i += 1
        else:
            pairs.append(a + b)
            i += 2

    if len(pairs[-1]) == 1:
        pairs[-1] += pad_char

    return pairs

def find_position(table, char):
    for row in range(5):
        for col in range(5):
            if table[row][col] == char:
                return row, col
    return None

def playfair_encrypt(plaintext, key):
    table = generate_playfair_table(key)
    pairs = preprocess_text(plaintext)
    ciphertext = ""

    for a, b in pairs:
        row_a, col_a = find_position(table, a)
        row_b, col_b = find_position(table, b)

        if row_a == row_b:
            ciphertext += table[row_a][(col_a + 1) % 5] + table[row_b][(col_b + 1) % 5]
        elif col_a == col_b:
            ciphertext += table[(row_a + 1) % 5][col_a] + table[(row_b + 1) % 5][col_b]
        else:
            ciphertext += table[row_a][col_b] + table[row_b][col_a]

    return ciphertext

def playfair_decrypt(ciphertext, key):
    table = generate_playfair_table(key)
    pairs = preprocess_text(ciphertext)
    plaintext = ""

    for a, b in pairs:
        row_a, col_a = find_position(table, a)
        row_b, col_b = find_position(table, b)

        if row_a == row_b:
            plaintext += table[row_a][(col_a - 1) % 5] + table[row_b][(col_b - 1) % 5]
        elif col_a == col_b:
            plaintext += table[(row_a - 1) % 5][col_a] + table[(row_b - 1) % 5][col_b]
        else:
            plaintext += table[row_a][col_b] + table[row_b][col_a]

    return plaintext

# Example usage
key = "PLAYFAIR EXAMPLE"
plaintext = "HIDETHEGOLDINTHETREXES"

encrypted_text = playfair_encrypt(plaintext, key)
print(f"Encrypted: {encrypted_text}")

decrypted_text = playfair_decrypt(encrypted_text, key)
print(f"Decrypted: {decrypted_text}")
