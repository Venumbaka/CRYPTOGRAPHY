#include <stdio.h>
#include <string.h>

int gcd(int a, int b) {
    int temp;
    while (b != 0) {
        temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1;
}

void encrypt(char *plaintext, char *ciphertext, int a, int b) {
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (plaintext[i] >= 'a' && plaintext[i] <= 'z') {
            ciphertext[i] = (char) (((a * (plaintext[i] - 'a') + b) % 26) + 'a');
        } else if (plaintext[i] >= 'A' && plaintext[i] <= 'Z') {
            ciphertext[i] = (char) (((a * (plaintext[i] - 'A') + b) % 26) + 'A');
        } else {
            ciphertext[i] = plaintext[i];
        }
    }
    ciphertext[strlen(plaintext)] = '\0';  // Null-terminate the ciphertext
}

void decrypt(char *ciphertext, char *plaintext, int a, int b) {
    int a_inv = modInverse(a, 26);
    if (a_inv == -1) {
        printf("Decryption is not possible, as 'a' does not have a modular inverse.\n");
        return;
    }
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = (char) ((a_inv * ((ciphertext[i] - 'a') - b + 26) % 26) + 'a');
        } else if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = (char) ((a_inv * ((ciphertext[i] - 'A') - b + 26) % 26) + 'A');
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';  // Null-terminate the plaintext
}

int main() {
    char plaintext[100], ciphertext[100], decryptedtext[100];
    int a, b;

    printf("Enter the plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';  // Remove newline character from input

    printf("Enter the values of 'a' and 'b': ");
    scanf("%d %d", &a, &b);

    if (gcd(a, 26) != 1) {
        printf("Invalid value of 'a'. It must be coprime with 26.\n");
        return 1;
    }

    encrypt(plaintext, ciphertext, a, b);
    printf("Encrypted text: %s\n", ciphertext);

    decrypt(ciphertext, decryptedtext, a, b);
    printf("Decrypted text: %s\n", decryptedtext);

    return 0;
}
